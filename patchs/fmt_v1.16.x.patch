diff --git a/src/fmt/print.go b/src/fmt/print.go
index 8bc225f548..161eefce72 100644
--- a/src/fmt/print.go
+++ b/src/fmt/print.go
@@ -7,7 +7,6 @@ package fmt
 import (
 	"internal/fmtsort"
 	"io"
-	"os"
 	"reflect"
 	"sync"
 	"unicode/utf8"
@@ -210,7 +209,7 @@ func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error) {
 // Printf formats according to a format specifier and writes to standard output.
 // It returns the number of bytes written and any write error encountered.
 func Printf(format string, a ...interface{}) (n int, err error) {
-	return Fprintf(os.Stdout, format, a...)
+	return 0,nil
 }
 
 // Sprintf formats according to a format specifier and returns the resulting string.
@@ -239,7 +238,7 @@ func Fprint(w io.Writer, a ...interface{}) (n int, err error) {
 // Spaces are added between operands when neither is a string.
 // It returns the number of bytes written and any write error encountered.
 func Print(a ...interface{}) (n int, err error) {
-	return Fprint(os.Stdout, a...)
+	return 0,nil
 }
 
 // Sprint formats using the default formats for its operands and returns the resulting string.
@@ -271,7 +270,7 @@ func Fprintln(w io.Writer, a ...interface{}) (n int, err error) {
 // Spaces are always added between operands and a newline is appended.
 // It returns the number of bytes written and any write error encountered.
 func Println(a ...interface{}) (n int, err error) {
-	return Fprintln(os.Stdout, a...)
+	return 0,nil
 }
 
 // Sprintln formats using the default formats for its operands and returns the resulting string.
diff --git a/src/fmt/scan.go b/src/fmt/scan.go
index 381577049c..d2b686b835 100644
--- a/src/fmt/scan.go
+++ b/src/fmt/scan.go
@@ -8,7 +8,6 @@ import (
 	"errors"
 	"io"
 	"math"
-	"os"
 	"reflect"
 	"strconv"
 	"sync"
@@ -61,13 +60,13 @@ type Scanner interface {
 // as space. It returns the number of items successfully scanned.
 // If that is less than the number of arguments, err will report why.
 func Scan(a ...interface{}) (n int, err error) {
-	return Fscan(os.Stdin, a...)
+	return 0,nil
 }
 
 // Scanln is similar to Scan, but stops scanning at a newline and
 // after the final item there must be a newline or EOF.
 func Scanln(a ...interface{}) (n int, err error) {
-	return Fscanln(os.Stdin, a...)
+	return 0,nil
 }
 
 // Scanf scans text read from standard input, storing successive
@@ -78,7 +77,7 @@ func Scanln(a ...interface{}) (n int, err error) {
 // The one exception: the verb %c always scans the next rune in the
 // input, even if it is a space (or tab etc.) or newline.
 func Scanf(format string, a ...interface{}) (n int, err error) {
-	return Fscanf(os.Stdin, format, a...)
+	return 0,nil
 }
 
 type stringReader string
