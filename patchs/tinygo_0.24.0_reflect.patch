diff --git a/src/reflect/value.go b/src/reflect/value.go
index cb784df6..06714487 100644
--- a/src/reflect/value.go
+++ b/src/reflect/value.go
@@ -751,8 +751,26 @@ func MakeSlice(typ Type, len, cap int) Value {
 	panic("unimplemented: reflect.MakeSlice()")
 }
 
+// Zero returns a Value representing the zero value for the specified type.
+// The result is different from the zero value of the Value struct,
+// which represents no value at all.
+// For example, Zero(TypeOf(42)) returns a Value with Kind Int and value 0.
 func Zero(typ Type) Value {
-	panic("unimplemented: reflect.Zero()")
+	if typ == nil {
+		panic("reflect: Zero(nil)")
+	}
+	t := typ.(rawType)
+
+	switch t.Kind() {
+	case Func, Chan, Map, Ptr, Slice, UnsafePointer, Interface:
+		return Value{t, nil, valueFlagExported}
+	case Bool, Int, Int8, Int16, Int32,Int64, Uint,Uint8,Uint16,Uint32,Uint64,Float32,
+		Float64, Complex64, Complex128, String, Array, Struct:
+		val := alloc(typ.Size(), nil)
+		return Value{t, val, valueFlagExported&valueFlagIndirect}
+	default: // not implemented: Func
+		panic(&ValueError{Method: "Pointer"})
+	}
 }
 
 // New is the reflect equivalent of the new(T) keyword, returning a pointer to a
diff --git a/targets/fvm.json b/targets/fvm.json
new file mode 100644
index 00000000..8ff4c3a2
--- /dev/null
+++ b/targets/fvm.json
@@ -0,0 +1,18 @@
+{
+	"llvm-target":   "wasm32-unknown-wasi",
+	"cpu":           "generic",
+	"build-tags":    ["tinygo.wasm", "wasi"],
+	"goos":          "linux",
+	"goarch":        "arm",
+	"linker":        "wasm-ld",
+	"libc":          "wasi-libc",
+	"scheduler":     "asyncify",
+	"default-stack-size": 16384,
+	"ldflags": [
+		"--allow-undefined",
+		"--stack-first",
+		"--no-demangle"
+	],
+	"emulator":      "wasmtime {}",
+	"wasm-abi":      "generic"
+}
